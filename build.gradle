// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext.PluginsVersions = [
            "GradlePluginV"      : "7.0.3",
            "KotlinPluginV"      : "1.5.20",
            "EasyLauncherPluginV": "1.3.1",
            "FirebasePluginV"    : "4.3.1",
            "NavigationPluginV"  : "2.2.0-rc04",
            "VortexPluginV"      : "1.0.0",
            "RealmPluginV"       : "10.8.0",
            "HiltPluginVersion"  : "2.28-alpha"
    ]

    repositories {
        google()
        mavenCentral()
        maven { url "https://details.gradle.org/m2/" }
        maven { url 'https://jitpack.io' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:${rootProject.ext.PluginsVersions.GradlePluginV}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${rootProject.ext.PluginsVersions.KotlinPluginV}"
        classpath "com.akaita.android:easylauncher:${rootProject.ext.PluginsVersions.EasyLauncherPluginV}"
        classpath "com.google.gms:google-services:${rootProject.ext.PluginsVersions.FirebasePluginV}"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:${rootProject.ext.PluginsVersions.NavigationPluginV}"
        classpath "io.realm:realm-gradle-plugin:${rootProject.ext.PluginsVersions.RealmPluginV}"
        classpath "com.google.dagger:hilt-android-gradle-plugin:${rootProject.ext.PluginsVersions.HiltPluginVersion}"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url "https://details.gradle.org/m2/" }
        maven { url 'https://jitpack.io' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
}

apply from: "details.gradle"

subprojects {

    apply plugin: "${rootProject.ext.LibraryPlugin}"
    apply plugin: "${rootProject.ext.KotlinAndroidPlugin}"
    apply plugin: "${rootProject.ext.KotlinAndroidExtPlugin}"

    android {
        compileSdkVersion rootProject.ext.ApplicationCompileV

        defaultConfig {

            minSdkVersion rootProject.ext.MinSdkV
            targetSdkVersion rootProject.ext.ApplicationCompileV
            versionCode rootProject.ext.LibraryVersionCode
            versionName "${rootProject.ext.LibraryVersion}"

        }

        buildTypes {
            release {
                minifyEnabled true
                debuggable false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }

        lintOptions {
            abortOnError false
        }

        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    dependencies { configuration ->
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${rootProject.ext.PluginsVersions.KotlinPluginV}"

        addRxJavaLibraries(configuration)
        addCoroutinesLibraries(configuration)
        addDefaultAppCompatDependencies(configuration)

        if (!project.name.equals("vortex")) {
            implementation project(":vortex")
        }
    }

}

public void addDefaultAppCompatDependencies(configuration) {
    configuration.implementation("androidx.appcompat:appcompat:${rootProject.ext.AppCompatV}")
    configuration.implementation("androidx.core:core-ktx:${rootProject.ext.AndroidCoreV}")
    configuration.testImplementation("junit:junit:${rootProject.ext.JUnitV}")
    configuration.androidTestImplementation("androidx.test.ext:junit:${rootProject.ext.TestJunitV}")
    configuration.androidTestImplementation("androidx.test.espresso:espresso-core:${rootProject.ext.EspressoV}")
}

public void addCoroutinesLibraries(configuration) {
    configuration.implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${rootProject.ext.CoroutinesCoreV}")
    configuration.implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:${rootProject.ext.CoroutinesAndroidV}")
}

public void addRxJavaLibraries(configuration) {
    configuration.implementation("io.reactivex.rxjava2:rxjava:${rootProject.ext.RxJavaV}")
    configuration.implementation("io.reactivex.rxjava2:rxandroid:${rootProject.ext.RxAndroidV}")
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
