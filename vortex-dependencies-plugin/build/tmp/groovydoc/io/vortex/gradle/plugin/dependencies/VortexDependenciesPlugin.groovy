/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package io.vanite.gradle.plugin.dependencies

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.artifacts.DependencyResolutionListener
import org.gradle.api.artifacts.ResolvableDependencies

public class VortexDependenciesPlugin implements Plugin<Project>, VortexPluginImpl {

    private def compileDeps
    public static final String USER_INTERFACE_LAYER = "ui"
    public static final String ROOT_APP_LAYER = "app"
    public static final String DATA_LAYER = "data"
    public static final String DOMAIN_LAYER = "domain"

    public void apply(Project project) {
        def extention = project.extensions.create("features", VortexExtentionPlugin)
        project.task("vortex") {
            doLast {
                print("Vortex Extention: ${extention.isViewBindingEnabled}")
            }
        }

        if (project.getName().equals(USER_INTERFACE_LAYER) || project.getName().equals(ROOT_APP_LAYER)) {
            if (extention != null) {
                applyUserInterfaceLayer(project, extention.isViewBindingEnabled)
            } else {
                applyUserInterfaceLayer(project, false)
            }
        } else if (project.getName().equals(DATA_LAYER)) {
            applyDataLayer(project)
        } else if (project.getName().equals(DOMAIN_LAYER)) {
            applyDomainLayer(project)
        }
    }

    @Override
    void applyUserInterfaceLayer(Project project, boolean isViewBindingEnabled) {
        compileDeps = project.getConfigurations().getByName("implementation").getDependencies()
        project.getGradle().addListener(new DependencyResolutionListener() {
            @Override
            void beforeResolve(ResolvableDependencies resolvableDependencies) {
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_CORE))
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_DATA))
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_FIREBASE))
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_LOGGER))
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_PREFS))
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_PERMISSIONS))
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_UI))
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_UTILS))
                if (isViewBindingEnabled) {
                    compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_UI_BINDING))
                }
                project.getGradle().removeListener(this)
            }

            @Override
            void afterResolve(ResolvableDependencies resolvableDependencies) {}
        })
    }

    @Override
    void applyDataLayer(Project project) {
        compileDeps = project.getConfigurations().getByName("implementation").getDependencies()
        project.getGradle().addListener(new DependencyResolutionListener() {
            @Override
            void beforeResolve(ResolvableDependencies resolvableDependencies) {
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_DATA))
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_LOGGER))
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_PREFS))
                project.getGradle().removeListener(this)
            }

            @Override
            void afterResolve(ResolvableDependencies resolvableDependencies) {}
        })
    }

    @Override
    void applyDomainLayer(Project project) {
        compileDeps = project.getConfigurations().getByName("implementation").getDependencies()
        project.getGradle().addListener(new DependencyResolutionListener() {
            @Override
            void beforeResolve(ResolvableDependencies resolvableDependencies) {
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_CORE))
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_DATA))
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_LOGGER))
                compileDeps.add(project.getDependencies().create(VortexDependencies.VORTEX_PREFS))
                project.getGradle().removeListener(this)
            }

            @Override
            void afterResolve(ResolvableDependencies resolvableDependencies) {}
        })
    }

}